1. MYBATIS
[Maven]
	root-context)
		- spring-jdbc
		- spring-tx
		- mybatis-spring
			- mybatis 
				- JDBC를 통해 DB에 접근하는 작업을 캡슐화
				- 일반 SQL 쿼리, 프로시저 등의 고급 매핑을 지원하는 프레임 워크
				- 프로그램 소스코드와 SQL 쿼리가 분리 - 유지보수 향상
				- 코드 간결성 향상
	
	DB)
		Conntection Pool
			- hikari-cp
			- HikariCP
			
	etc)
		- lombok 1.18
		- jstl 1.2
		 
	default) 
		- javax.servlet-api 4.0.1
		- javax.inject 1
		- javax.servlet.jsp-api 2.3.3

- Server.xml
	- 서버를 구동할 프로젝트를 설정한다. path를 통해 루트 url 값을 정의할 수 있다. 

- web.xml 
	- WebApplication 설정 파일
		- DispatcherServlet
		- ContextLoaderListener
		- Filter
	개념: 클라이언트의 요청을 받아 컨트롤러에서 처리해주기 위해 정의되는 XML파일
		 Servlet과 jsp 사이에서 값을 주고 받는 매개체 역할을 함
	@Controller 어노테이션을 이용해 Handler Adapter가 자동으로 값을 처리한다.

- pom.xml
	- 프로젝트 내 빌드 옵션을 설정하는 부분으로 환경 설정을 담당한다.
	- Maven에서 필요한 jar파일을 dependency를 통해 사용할 수 있다.
	(Maven:자바 프로젝트를 관리하는 툴로 라이브러리를 다운하거나 프로젝트를 빌드해준다. 자바 소스를
	컴파일하고 패키지해서 deploy까지 자동화 해준다.)

- root-context.xml
	- 데이터의 조회 및 처리, DB관련 Bean을 설정해주는 공간
	- view와 관련되지 않은 객체를 정의 DAO,Service,DB등 비즈니스 로직과 관련된 설정

- servlet-context.xml
	- 요청과 관련된 객체 정의
	- url과 관련된 controller
	- 어노테이션 등을 설정해준다.
	
	
!! xml 쿼리 문에서 _ 는 Java에서 CamelCase로 변한된다
(ex. dept_no ==> deptNo)


2. [restAPI]
REST Representational State Transfer
	- 웹에서 데이터를 전송하고 처리하는 방법을 정의한 인터페이스
	- HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시
	- HTTP Method를 통해 해당 자원에 대한 CRUD Operation을 적용
	- Resource 중심의 설계 아키텍쳐
	
	- 메소드
		- POST : 데이터 생성(Create)
		- GET : 데이터 조회(Select)
		- PUT : 데이터 수정(Update)
		- DELETE : 데이터 삭제(Delete)
	
	- 구성
		- 자원(Resource) - URI
		- 행위 (Verb) - HTTP Method
		- 표현 (Representations)
		
	- 규칙
		- 소문자 사용(대소문자 구분)
		- Hypen (-) 사용 
		- 공백 제거
		- CRUD 포함 x
			ex) id번호가 7번인 책을 삭제하겠다
				-GET: /book/delete/7 -> DELETE : /book/7
		
		- / : 계층 관계
			ex) http://study.spring.com/part(x) : 마지막에는 / 붙이지 않는다.
		
	- HTTP Status Code :https://developer.mozilla.org/ko/docs/Web/HTTP/Status
		- 200 : OK, ...
		- 404 : Not Found page
		- 500 : Server Error
		... 
	- HATEOS Hypermedia As The Of Engine Application State
		- REST API에 대한 결과 정보

3. 자원 공유
	- 동일 출처 정책 SOP Same-Origin Policy
		- 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식
			- Origin 구성
				- URL Schema 
				- Hostname 
				- Port 
				------------- 같으면 동일 출처 (경로만 다를뿐 포트까지 같으면 동일한 출처)
	- 동일 출처 구분
		http://oringin.spring.com/dev/back.html	
		http://oringin.spring.com/server/server.html
		https://dev.spring.com/server/server.html 다른 출처 (호스트가 다름)
		https://oringin.spring.com/secure/server.html 다른 출처 (프로토콜이 다름)
		https://oringin.spring.com:81/ 다른 출처 (포트넘버가 다름)
		
	
	- 교차 출처 자원 공유 CORS, Cross Origin Resource Sharing
		- 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 브라우저에 알려주는 체제
		- 동일 출처 정책에 대한 불편함을 해결하기 위해 등장한 정책
		- 웹 브라우저에서 외부 도메인 서버와 통신하기 위한 방식을 표준화한 스펙
		- 다른 출처의 리소스를 불러오려면 그 출처에서 올바른 CORS 헤더를 포함한 응답을 반환